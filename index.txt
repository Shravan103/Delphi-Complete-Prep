1. UPDATE SQL
procedure TForm2.btnUpdateClick(Sender: TObject);
begin
  if EditCustomerID.Text = '' then
  begin
    ShowMessage('Customer ID is required to update.');
    Exit;
  end;

  try
    qryEdit.SQL.Clear;

    // First UPDATE: Customer_Details
    qryEdit.SQL.Add('UPDATE Customer_Details SET ' +
      'Fname = ' + QuotedStr(EditFName.Text) + ', ' +
      'Lname = ' + QuotedStr(EditLName.Text) + ', ' +
      'Account_no = ' + QuotedStr(EditAccountNo.Text) +
      ' WHERE Customer_id = ' + QuotedStr(EditCustomerID.Text) + ';');

    // Execute first update
    qryEdit.ExecSQL;

    // Second UPDATE: Account_Details
    qryEdit.SQL.Clear;
    qryEdit.SQL.Add('UPDATE Account_Details SET ' +
      'Account_Type = ' + QuotedStr(EditAccountType.Text) + ', ' +
      'DateofCreation = ' + QuotedStr(FormatDateTime('yyyy-mm-dd', DatePickerCreation.Date)) + ', ' +
      'MinBalance = ' + EditMinBalance.Text + ', ' +
      'Balance = ' + EditBalance.Text +
      ' WHERE Account_no = ' + QuotedStr(EditAccountNo.Text) + ';');

    qryEdit.ExecSQL;

    ShowMessage('Record updated successfully.');
    qryView.Close;
    qryView.Open;
    
  except
    on E: Exception do
      ShowMessage('Update Error: ' + E.Message);
  end;
end;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

2. DELETE BUTTON
procedure TForm2.btnDeleteClick(Sender: TObject);
var
  AccountNo: string;
begin
  if EditCustomerID.Text = '' then
  begin
    ShowMessage('Please enter a Customer ID to delete.');
    Exit;
  end;

  try
    // Step 1: Find associated Account_no from Customer_Details
    qryEdit.SQL.Clear;
    qryEdit.SQL.Text := 'SELECT Account_no FROM Customer_Details WHERE Customer_id = ' +
                        QuotedStr(EditCustomerID.Text);
    qryEdit.Open;

    if qryEdit.IsEmpty then
    begin
      ShowMessage('No customer found with the given ID.');
      Exit;
    end;

    AccountNo := qryEdit.FieldByName('Account_no').AsString;
    qryEdit.Close;

    // Step 2: Delete from Customer_Details
    qryEdit.SQL.Clear;
    qryEdit.SQL.Text := 'DELETE FROM Customer_Details WHERE Customer_id = ' +
                        QuotedStr(EditCustomerID.Text);
    qryEdit.ExecSQL;

    // Step 3: Delete from Account_Details
    qryEdit.SQL.Clear;
    qryEdit.SQL.Text := 'DELETE FROM Account_Details WHERE Account_no = ' +
                        QuotedStr(AccountNo);
    qryEdit.ExecSQL;

    ShowMessage('Customer and account deleted successfully.');
    qryView.Close;
    qryView.Open;

  except
    on E: Exception do
      ShowMessage('Deletion failed: ' + E.Message);
  end;
end;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

6. CREDIT BUTTON
procedure TForm2.btnCreditClick(Sender: TObject);
begin
  if (EditCustomerID.Text = '') or (EditAmount.Text = '') then
  begin
    ShowMessage('Enter Customer ID and Amount.');
    Exit;
  end;

  if not TryStrToFloat(EditAmount.Text, var CreditAmt) or (CreditAmt <= 0) then
  begin
    ShowMessage('Invalid amount.');
    Exit;
  end;

  try
    qryTxn.SQL.Clear;
    qryTxn.SQL.Text := 
      'UPDATE Account_Details SET Balance = Balance + ' + EditAmount.Text +
      ' WHERE Account_no = (' +
        'SELECT Account_no FROM Customer_Details WHERE Customer_id = ' + QuotedStr(EditCustomerID.Text) +
      ')';
    qryTxn.ExecSQL;

    ShowMessage('Amount credited successfully.');
    qryView.Close;
    qryView.Open;

  except
    on E: Exception do
      ShowMessage('Credit failed: ' + E.Message);
  end;
end;

---------------------------------------------------------------------------------------------------------------------------------------

7. DEPOSIT BUTTON
procedure TForm2.btnDebitClick(Sender: TObject);
begin
  if (EditCustomerID.Text = '') or (EditAmount.Text = '') then
  begin
    ShowMessage('Enter Customer ID and Amount.');
    Exit;
  end;

  if not TryStrToFloat(EditAmount.Text, var DebitAmt) or (DebitAmt <= 0) then
  begin
    ShowMessage('Invalid amount.');
    Exit;
  end;

  try
    // Attempt debit only if balance - amount >= min balance
    qryTxn.SQL.Clear;
    qryTxn.SQL.Text :=
      'UPDATE Account_Details SET Balance = Balance - ' + EditAmount.Text +
      ' WHERE Account_no = (' +
        'SELECT Account_no FROM Customer_Details WHERE Customer_id = ' + QuotedStr(EditCustomerID.Text) +
      ') AND (Balance - ' + EditAmount.Text + ') >= MinBalance';

    qryTxn.ExecSQL;

    if qryTxn.RowsAffected = 0 then
      ShowMessage('Debit failed: Not enough balance to maintain minimum.')
    else
    begin
      ShowMessage('Amount debited successfully.');
      qryView.Close;
      qryView.Open;
    end;

  except
    on E: Exception do
      ShowMessage('Debit error: ' + E.Message);
  end;
end;
